#!/bin/bash

# THIS PROGRAM HAS 4 SECTIONS, EACH LABELED WITH AN S FOLLOWED WITH A NUMBER, FOLLOWED WITH A DASH AND ITS LABEL NAME.

: <<'S1-DIRECTORY_GENERATION'
In this section the first command asks you to name the project, then it stores it in the project variable.
The dir variable is then defined as the working directory variable concatenated with / and the project variable
S1-DIRECTORY_GENERATION

read -p "Name project:		" project
dir="$PWD"/"$project"

: <<'S2-SKELETON'
First command creates a directory using the dir variable.
2nd line creates the build, include, and lib subdirectories.
S2-SKELETON

mkdir $dir; printf "CC=gcc\n" >> "$dir"/Makefile
mkdir "$dir"/build; mkdir "$dir"/include; mkdir "$dir"/lib

: <<'S3-POPULATE'
In this section contains 2 while loops labeled W1 and W2, each are getting input from the user as to where the includes/libraries the users want to push into the project folder are.
Why do i do this when they could easily point to it with their compiler? It's not for that purpose, this is so gtags has an easier time locating the libraries and includes. More on this later.
S3-POPULATE

# W1
while true; do
	read -p "Include path:	" -r include
	cd $include
if ls *.h; then
	cp -r $include $dir/include
	read -p "Add another? (Y/N)	" yn
	case $yn in
		[nN] )
			printf "Okay, proceeding to next step\n\n";
			break;;
		[yY] )
			printf "Okay, supply another path.\n\n";
			;;
		* )
			printf "invalid response"; #kills program entirely, couldnt figure out how to make it ask question again.
			exit 0;;
	esac
	else
		printf "THAT DIDNT HAVE HEADERS MOTHERFUCKER!\n\n"
fi
done

#W2
while true; do
	read -p "Library path:	" -r lib
	cd $lib
if ls -1 | grep -E "\.(so|a)$"; then
	cp -r $lib $dir/lib
	read -p "Add another? (Y/N)	" yn
	case $yn in
		[nN] )
			printf "Okay, proceeding to next step\n\n";
			break;;
		[yY] )
			printf "Okay, supply another path.\n\n";
			;;
		* )
			printf "invalid response"; #kills program entirely, couldnt figure out how to make it ask question again.
			exit 0;;
		esac
		else
			printf "NO LINKS, NO DYNAMIC LINKS, NO LINKS NO LINKS NO LINKS?! GET THIS OUT OF MY FACE!\n\n\n"
fi
done

: <<'S4-FINALIZE'
This last step is using gtags (https://www.gnu.org/software/global/)
what it does is summarized best by what they say on their page
"You can locate various objects, such as functions, macros, structs, classes, in your source files and move there easily. It is useful for hacking on a large project which contains many sub-directories, many #ifdef and many main() functions." and this is a functionality independent of any editor and its able to treat definitions and references.

You may need to tweak the include path inside the .dir-locals.el
S4-FINALIZE

indir="$dir"/include

cd $dir; gtags -v
emacsclient -n -a "" -c -e "(progn (dired-other-frame default-directory) (ggtags-mode) (ggtags-create-tags default-directory))" # I had to do this stupid hack where i create a new frame with the -c flag in order for this to work, i dont know how to do this a different way.
echo "check .dir-locals.el to make sure it properly leads to your include path, this is important to make sure that flycheck is properly set up."
printf '
;;; Directory Local Variables            -*- no-byte-compile: t -*-
;;; For more information see (info "(emacs) Directory Variables")

(setq flycheck-gcc-include-path "'$indir'")
' > .dir-locals.el
